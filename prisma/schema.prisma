// Survey (NPS | 5-Stars | CSAT | CES | Smileys | eNPS | Thumbs | PMF)
// Platform (Web | Email | SMS | Link/QrCode)
// Customization Button Style  (Fill | Outline) | Button Shape (Rounded, Square, Full Rounded)
// People
// Finish

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  customerId    String?        @unique
  subscription  Subscription?
  surveys       Survey[]
  notifications Notification[]
  NPS           NPS
  CES           CES
  CSAT          CSAT
  Stars         Stars
  Smiley        Smiley
  ENPS          ENPS
  Thumb         Thumb
  PMF           PMF
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  country       String
  priceId       String         @unique
  subscriptions Subscription[]
}

model Subscription {
  id                   String   @id @default(uuid())
  subscritiptionId     String   @unique
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  planId               String?
  plan                 Plan?    @relation(fields: [planId], references: [id])
  currentPeriodEndDate DateTime
  active               Boolean  @default(false)

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

// Survey type: (NPS | 5-Stars | CSAT | CES | Smileys | eNPS | Thumbs | PMF)

model Survey {
  id                   String     @id @default(uuid())
  createdAt            DateTime   @default(now())
  updatedAt            DateTime   @updatedAt
  title                String // title of survey
  isAnonymous          Boolean // if survey is anonymous or no
  status               String // sketch | test | inactive | active  
  onMobile             Boolean // show in mobile
  apresentationMessage String // require Plan Plus or more
  limit                Int // limit of responses
  image                String // url for image # require Plan Plus or more
  userId               String
  user                 User       @relation(fields: [userId], references: [id])
  responses            Response[]
  questions            Question[]

  timeToShow Int // seconds for the user to see the survey 
}

model Question {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  text      String
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id])
}

model Contact {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  email       String?
  phoneNumber String?
  country     String?
  state       String?
  responses   Response[]
}

model Response {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  comment   String?
  surveyId  String
  survey    Survey   @relation(fields: [surveyId], references: [id])
  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)
}

// Email | Web | SMS | Link/QRCode

// Email:  (Sent | Open | Responded | Commented)
//              Throttled | Bounced | Unsubscribed

// Web: (Shown | Responded | Commented)

// SMS: (Sent | Responded | Commented)
//            Throttled

// Link: (Shown | Responded | Commented)

model Channel {
  id String @id @default(uuid())
}

model Configuration {
  id String @id @default(uuid())
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  read      Boolean
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

model Workflow {
  id    String @id @default(uuid())
  title String
}

model Metrics {
  id String @id @default(uuid())
}

model NPS {
  id                   String @id @default(uuid())
  userId               String @unique
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apresentationMessage String
  buttonStyle          String
  buttonShape          String
}

model CES {
  id                   String @id @default(uuid())
  userId               String @unique
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apresentationMessage String
  buttonStyle          String
  buttonShape          String
}

model CSAT {
  id                   String @id @default(uuid())
  userId               String @unique
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apresentationMessage String
  buttonStyle          String
  buttonShape          String
}

model Stars {
  id                   String @id @default(uuid())
  userId               String @unique
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apresentationMessage String
  buttonStyle          String
  buttonShape          String
}

model Smiley {
  id                   String @id @default(uuid())
  userId               String @unique
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apresentationMessage String
  buttonStyle          String
  buttonShape          String
}

model ENPS {
  id                   String @id @default(uuid())
  userId               String @unique
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apresentationMessage String
  buttonStyle          String
  buttonShape          String
}

model Thumb {
  id                   String @id @default(uuid())
  userId               String @unique
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apresentationMessage String
  buttonStyle          String
  buttonShape          String
}

model PMF {
  id                   String @id @default(uuid())
  userId               String @unique
  user                 User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  apresentationMessage String
  buttonStyle          String
  buttonShape          String
}
