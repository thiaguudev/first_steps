generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(uuid())
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Plan {
  id            String         @id @default(uuid())
  name          String         @unique
  country       String
  priceId       String         @unique
  subscriptions Subscription[]
}

model Subscription {
  id                   String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  subscritiptionId     String   @unique
  currentPeriodEndDate DateTime // data of end of plan
  active               Boolean  @default(false)

  planId String?
  plan   Plan?   @relation(fields: [planId], references: [id])

  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  teamId String @unique
  Team   Team?

  @@index([userId])
}

model Team {
  id   String @id @default(uuid())
  name String

  user User[]

  subscriptionId String?       @unique
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  teamId String?
  team   Team?   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  customerId   String?       @unique
  subscription Subscription?

  notifications Notification[]

  surveys Survey[]
}

model Contact {
  id          String     @id @default(uuid())
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  name        String
  email       String?
  phoneNumber String?
  country     String?
  state       String?
  responses   Response[]
}

model Notification {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  read      Boolean

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

model Flow {
  id    String @id @default(uuid())
  title String

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id], onDelete: Cascade)
}

model Response {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  comment String?
  score   Int

  surveyId String
  survey   Survey @relation(fields: [surveyId], references: [id])

  contactId String?
  contact   Contact? @relation(fields: [contactId], references: [id], onDelete: Cascade)

  channel String // Email / SMS / Web / Link/QrCode
}

model Survey {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type           String // NPS / CES / CSAT / 5-Stars / Smileys / eNPS / Thumbs / PMF 
  title          String // title of survey
  isAnonymous    Boolean    @default(true) // if survey is anonymous or no
  status         String // sketch | test | inactive | active  
  onMobile       Boolean // if survey is visible on mobile
  welcomeMessage String // require Plan Plus or more
  skipComment    Boolean    @default(false) // if skip comment in survey
  commentMessage String // require Plan Plus or more
  limit          Int // limit of responses
  image          String // url for image # require Plan Plus or more
  responses      Response[]
  question       String
  language       String // language of survey (pt-BR/en)
  timeToShow     Int        @default(2) // seconds for the user to see the survey 

  emailChannel      Boolean @default(false) // survey uses a email channel
  emailSent         Int     @default(0)
  emailOpen         Int     @default(0)
  emailResponded    Int     @default(0)
  emailCommented    Int     @default(0)
  emailThrottled    Int     @default(0)
  emailBounced      Int     @default(0)
  emailUnsubscribed Int     @default(0)

  emailFrom    String
  replyTo      String
  emailSubject String

  linkChannel   Boolean @default(false) // survey uses a link channel
  linkShown     Int     @default(0)
  linkResponded Int     @default(0)
  linkCommented Int     @default(0)

  smsChannel   Boolean @default(false) // survey uses a sms channel
  smsSent      Int     @default(0)
  smsShown     Int     @default(0)
  smsCommented Int     @default(0)
  smsThrottled Int     @default(0)

  webChannel   Boolean @default(false) // survey uses a web channel
  webShown     Int     @default(0)
  webResponded Int     @default(0)
  webCommented Int     @default(0)

  isRecurrent Int

  userId String
  user   User   @relation(fields: [userId], references: [id])

  flows Flow[]
}

model Feedback {
  id                String @id @default(uuid())
  invitationMessage String
  mainQuestion      String

  emailRequest Boolean @default(false)
}
